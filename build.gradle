/*
 * Copyright (c) 2015, The MITRE Corporation. All rights reserved.
 * See LICENSE for complete terms.
 *
 * Java-STIX Gradle Buildscript
 *
 * nemonik (Michael Joseph Walsh <github.com@nemonik.com>)
 *
 * Run
 *
 *	gradle
 *
 * from the commnand-line.
 *
 * Jar will be built to 
 *
 * 	build/libs/java-stix-${version}.jar
 */

import org.gradle.plugins.signing.Sign

import org.mitre.stix.RetrieveSchemasTask
import org.mitre.stix.PrefixNamespaceBindingsTask
import org.mitre.stix.GenerateJAXBTask
import org.mitre.stix.GeneratedSourceTransformationTask

apply plugin: "java"
apply plugin: "eclipse"
apply plugin: 'maven'
apply plugin: 'signing'

version = "1.1.1"
def isReleaseVersion = !version.endsWith("SNAPSHOT")

def stixShemaVersion = "1.1.1"

group = "org.mitre"
archivesBaseName = "stix"

defaultTasks "jar"

task retrieveSchemas(type: RetrieveSchemasTask, dependsOn: clean) {
	schemaVersion = project.version
}

task createPrefixNamespaceBindings(type: PrefixNamespaceBindingsTask, dependsOn: retrieveSchemas)

task generateJAXB(type: GenerateJAXBTask, dependsOn: createPrefixNamespaceBindings) {
	classpath= buildscript.configurations.classpath
	schemaVersion = project.version
}

task generatedSourceTransformation(type: GeneratedSourceTransformationTask, dependsOn: generateJAXB) {
	description "Perfom syntactical analysis and tranformations on the model (e.g., adding convenience methods)"
}

compileJava.dependsOn generatedSourceTransformation

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from 'LICENSE'
    from javadoc
    // from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: javadoc) {
    classifier = 'sources'
    from 'LICENSE'
    from 'README.md'
    from sourceSets.main.allSource
}

clean {
	delete("src/generated/java")
	delete("src/main/resources/namespace-prefix.xjb")
}

sourceSets {
	main {
		java { srcDirs("src/main/java", "src/generated/java") }
		resources {
			srcDir("src/main/resources")
			exclude "*.xjb" // not needed in the jar
		}
	}
}

repositories {
	jcenter()
	mavenCentral()
	mavenLocal()
	flatDir { dirs "libs" }
}

dependencies {
	compile "org.jvnet.jaxb2_commons:jaxb2-basics-runtime:0.6.5"
	compile "org.apache.httpcomponents:httpclient:4.3.5"
	compile "org.apache.httpcomponents:httpclient-cache:4.3.5"
	compile "org.apache.httpcomponents:httpmime:4.3.5"
	compile "org.apache.httpcomponents:fluent-hc:4.3.5"
	
	compile "org.springframework:spring-core:4.1.4.RELEASE"
	
	compile "commons-io:commons-io:2.4"
	
	compile "commons-lang:commons-lang:2.6"
}

jar {
	manifest {
		attributes 'Specification-Title': 'Structured Threat Information eXpression (STIX)',
		'Specification-Version': version,
		'Implementation-Title': 'Java-STIX',
		'Implementation-Version': version,
		'Implementation-Vendor': 'The MITRE Corporation'
	}
	
	from 'LICENSE'
}

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.allTasks.any { it instanceof Sign }) {
		// signingKeyId, signingPassword, secretKeyFile should be defined out of the repository, 
		// for example, in ~/.gradle/gradle.properties or alternatively as environment variables
		
		// signingKeyId = System.properties['signingKeyId']
		// secretKeyFile = System.properties['secretKeyFile']
		// signingPassword = System.properties['signingPassword']	
		
		allprojects { 
			ext."signing.keyId"=signingKeyId
			ext."signing.password"=signingPassword 
			ext."signing.secretKeyRingFile"=secretKeyFile 
		}
    }
}

signing {
	// required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

javadoc {
	include "**/org/mitre/stix/**/*"
	include "**/com/mandiant/**/*"
	include "**/gov/nist/**/*"
	include "**/oasis/nist/**/*"
	include "**/org/icasi/**/*"
	include "**/org/mitre/**/*"
	include "**/org/purl/**/*"
	include "**/org/w3/**/*"

	// options.memberLevel = JavadocMemberLevel.PRIVATE
    options.overview = "src/main/javadoc/overview.html";
    options.showAll()
    options.encoding("UTF-8")
    options.setUse(true)
    options.author(true)
    options.version(true)
    options.windowTitle("java-stix v." + version)
    options.docTitle("java-stix v." + version)
    options.footer("Copyright (c) 2015, The MITRE Corporation. All rights reserved.")
    
    doFirst {
        javadoc.title = "java-stix v." + version
        javadoc.options.docTitle = javadoc.title
    }
}

if (JavaVersion.current().isJava8Compatible()) {
    tasks.withType(Javadoc) {
        // disable strict doclint in Java 8
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

artifacts {
    archives javadocJar, sourcesJar
}

uploadArchives {

    // ossrhUsername, ossrhPassword should be defined out of the repository, 
    // for example, in ~/.gradle/gradle.properties or alternatively as 
    // environment variables

	// ossrhUsername = System.properties['sonotypeJiraId']
	// ossrhPassword= System.properties['sonotypeJiraPassword']
	
	ext."ossrhUsername"=sonotypeJiraId
	ext."ossrhPassword"=sonotypeJiraPassword

	repositories {
    	mavenDeployer {
      		beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

	      	repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
	        	authentication(userName: ossrhUsername, password: ossrhPassword)
	      	}
	
	      	snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
	        	authentication(userName: ossrhUsername, password: ossrhPassword)
	      	}
	
			pom.project {
	        	name 'stix'
	        	packaging 'jar'
	        	version "${version}-SNAPSHOT" // default is project.version
	        	// optionally artifactId can be defined here 
	        	description "The JAXB Bindings for STIX v." + version
	        	url "https://github.com/nemonik/java_stix"
	
	        	scm {
	          		connection "https://github.com/nemonik/java_stix.git"
	          		developerConnection "https://github.com/nemonik/java_stix.git"
	          		url "https://github.com/nemonik/java_stix"
	        	}
	
	        	licenses {
	          		license {
	            		name "The BSD 3-Clause License"
	            		url "https://raw.githubusercontent.com/nemonik/java_stix/master/LICENSE"
	          		}
	        	}
	
	        	developers {
	        		developer {
	            		id 'nemonik'
	            		name 'Michael Joseph Walsh'
	            		email 'java-stix-pom[ASCII character number 64]nemonik.com'
	          		}
	        	}
	        }
	    }     
    }
}

buildscript {

	repositories {
		jcenter()
		mavenCentral()
		mavenLocal()

		flatDir { dirs "libs" }
	}
	
	dependencies {
	
	 	// Needed for GeneratedSourceTransformationTask
		classpath name: "org.eclipse.core.runtime_3.10.0.v20140318-2214"
		classpath name: "org.eclipse.osgi_3.10.0.v20140606-1445"
		classpath name: "org.eclipse.core.contenttype_3.4.200.v20140207-1251"
		classpath name: "org.eclipse.equinox.common_3.6.200.v20130402-1505"
		classpath name: "org.eclipse.text_3.5.300.v20130515-1451"
		classpath name: "org.eclipse.core.jobs_3.6.0.v20140424-0053"
		classpath name: "org.eclipse.equinox.preferences_3.5.200.v20140224-1527"
		classpath name: "org.eclipse.core.resources_3.9.0.v20140514-1307"
		classpath name: "org.eclipse.jdt.core_3.10.0.v20140604-1726"
		classpath name: "org.eclipse.equinox.registry_3.5.400.v20140428-1507"
		
		classpath "com.sun.xml.bind:jaxb-xjc:2.2.5-2"
		classpath "com.sun.xml.bind:jaxb-impl:2.2.5-2"
		classpath "javax.xml.bind:jaxb-api:2.2.+"
	
		// JAXB2 Basics provides a package of plugins which can generate such
		// utility code
		classpath "org.jvnet.jaxb2_commons:jaxb2-basics:0.6.5"
		classpath "org.jvnet.jaxb2_commons:jaxb2-basics-ant:0.6.5"
	
		// Causes JAXB RI 2 XJC to generate additional methods that allows method
		// chaining.
		classpath "org.jvnet.jaxb2_commons:jaxb2-fluent-api:3.0"
	
		// Causes JAXB RI 2 XJC to generate a value constructor, where each
		// embedded element is included as a constructor parameter.
		classpath "org.jvnet.jaxb2_commons:jaxb2-value-constructor:3.0"
	
		// Causes JAXB RI 2.2 XJC to automatically generate methods for toString(),
		// equals() and hashCode() using jakarta-commons-lang. The code that uses
		// this plugin can still run with any JAXB2 implementation.
		//xjc "org.jvnet.jaxb2_commons:jaxb2-commons-lang:2.4"
	
		// This plugin uses the XML schema "element" tag's "default" attribute to
		// set default values for variables in the classes generated by JAXB
		classpath "org.jvnet.jaxb2_commons:jaxb2-default-value:1.1"
	
		// This plugin adds 'javax.xml.bind.annotation.XmlNs' annotations to
		// 'package-info.java' file according to specific definitions in
		// bindings.xml file. Those annotations associate namespace prefixes
		// with XML namespace URIs.
		classpath "org.jvnet.jaxb2_commons:jaxb2-namespace-prefix:1.1"
	}
}