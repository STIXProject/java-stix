/*
 * Copyright (c) 2015, The MITRE Corporation. All rights reserved.
 * See LICENSE for complete terms.
 *
 * Java-STIX Gradle Buildscript
 *
 * nemonik (Michael Joseph Walsh <github.com@nemonik.com>)
 *
 * Run
 *
 *	./gradlew
 *
 * from the commnand-line and the build task will execute by default.
 *
 * The Jar will be built to 
 *
 * 	build/libs/stix-${version}.jar
 * 
 *
 * Publishing archives:
 *
 * signingKeyId, signingPassword, secretKeyFile, ossrhUsername, and ossrhPassword properties
 * should be defined outside of the repository either on the command-line via
 * 
 * ./gradlew -PsigningKeyId=value -PsigningPassword=value -PsecretKeyFile=value -PossrhUsername=value -PossrhPassword=value
 *
 * or via ~/.gradle/gradle.properties as 
 *
 * signingKeyId=value
 * signingPassword=value
 * secretKeyFile=value
 * ossrhUsername=value
 * ossrhPassword=value
 *
 * Check settings via:
 *
 * ./gradle checkProperties
 *
 */

import org.gradle.plugins.signing.Sign

import org.mitre.stix.RetrieveSchemasTask
import org.mitre.stix.PrefixNamespaceBindingsTask
import org.mitre.stix.GenerateJAXBTask
import org.mitre.stix.CreatePackageInfoTask
import org.mitre.stix.GeneratedSourceTransformationTask
import org.mitre.stix.CleanSchemaTask
import org.mitre.stix.CalcChecksumTask

apply plugin: "java"
apply plugin: "groovy"
apply plugin: "eclipse"
apply plugin: "maven"
apply plugin: "signing"

defaultTasks "build"

version = "1.1.1"
group = "org.mitre"
archivesBaseName = "stix"

project.ext.set("schemaVersion", version)

if (project.hasProperty("snapshot")) {
	version = "${version}-SNAPSHOT"
}

task retrieveSchemas(type: RetrieveSchemasTask, dependsOn: clean) {
	schemaVersion = project.schemaVersion
}

task createPrefixNamespaceBindings(type: PrefixNamespaceBindingsTask, dependsOn: retrieveSchemas) {
	schemaVersion = project.schemaVersion
}

task generateJAXB(type: GenerateJAXBTask, dependsOn: createPrefixNamespaceBindings) {
	classpath= buildscript.configurations.classpath
	schemaVersion = project.schemaVersion
}

task generatedSourceTransformation(type: GeneratedSourceTransformationTask, dependsOn: generateJAXB)

task createPackageInfo(type: CreatePackageInfoTask, dependsOn: generatedSourceTransformation) {
	schemaVersion = project.schemaVersion
}
task cleanSchema(type: CleanSchemaTask) {
	schemaVersion = project.schemaVersion
}

task calcChecksum(type: CalcChecksumTask) {
}

compileJava.dependsOn createPackageInfo

task wrapper(type: Wrapper) {
	gradleVersion = '2.4'
}

task javadocJar(type: Jar) {
	classifier = 'javadoc'
	from 'LICENSE'
	from javadoc
}

task sourcesJar(type: Jar, dependsOn: javadoc) {
	classifier = 'sources'
	from 'LICENSE'
	from 'README.md'
	from sourceSets.main.allSource
}

gradle.taskGraph.whenReady { taskGraph ->
	if (taskGraph.allTasks.any { it instanceof Sign}) {
		allprojects {
			ext."signing.keyId" = signingKeyId ?: ""
			ext."signing.password" = signingPassword ?: ""
			ext."signing.secretKeyRingFile" = secretKeyFile ?: ""
		}
	}
}

task checkProperties() {
	println "signingKeyId ${signingKeyId ? '= ' + signingKeyId : 'is not set.'}" 
	println "signingPassword ${signingPassword ? '= ' + signingPassword : 'is not set.'}"
	println "secretKeyFile ${secretKeyFile ? '= ' + secretKeyFile : 'is not set.'}"
	println "ossrhUsername ${ossrhUsername ? '= ' + ossrhUsername : 'is not set.'}"
	println "ossrhPassword ${ossrhPassword ?'= ' +  ossrhPassword : 'is not set.'}"
}

signing {
	required {
		!version.contains("SNAPSHOT") && gradle.taskGraph.hasTask("uploadArchives")
	}
	sign configurations.archives
}

clean {
	delete("src/generated/java")
	delete("src/main/resources/namespace-prefix.xjb")
}

sourceSets {
	main {
		java { srcDirs("src/main/java", "src/generated/java") }
		resources {
			srcDir("src/main/resources")
			exclude "*.xjb" // not needed in the jar
		}
	}
}

repositories {
	jcenter()
	mavenCentral()
	mavenLocal()
	flatDir { dirs "libs" }
}

dependencies {
	compile "org.jvnet.jaxb2_commons:jaxb2-basics-runtime:0.6.5"
	compile "org.apache.httpcomponents:httpclient:4.3.5"
	compile "org.apache.httpcomponents:httpclient-cache:4.3.5"
	compile "org.apache.httpcomponents:httpmime:4.3.5"
	compile "org.apache.httpcomponents:fluent-hc:4.3.5"
	
	compile "org.springframework:spring-core:4.1.4.RELEASE"
	
	compile "commons-io:commons-io:2.4"
	
	compile "commons-lang:commons-lang:2.6"
	
	testCompile "org.codehaus.groovy:groovy:2.4.3"
	testCompile "org.spockframework:spock-core:1.0-groovy-2.4"
	testCompile "xmlunit:xmlunit:1.6"
}

jar {
	manifest {
		attributes 'Specification-Title': 'Structured Threat Information eXpression (STIX)',
		'Specification-Version': version,
		'Implementation-Title': 'Java-STIX',
		'Implementation-Version': version,
		'Implementation-Vendor': 'The MITRE Corporation'
	}

	from 'LICENSE'
}

afterEvaluate { project -> 
	uploadArchives {
		repositories {
			mavenDeployer {
				beforeDeployment { MavenDeployment deployment -> 
					signing.signPom(deployment)
				}
	
				repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
					authentication(userName: ossrhUsername ?: "", password: ossrhPassword ?: "")
				}
				
				snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
					authentication(userName: ossrhUsername ?: "", password: ossrhPassword ?: "")
				}
				
				pom.project {
					name "${archivesBaseName}"
					packaging 'jar'
					version "${project.version}"
					// optionally artifactId can be defined here 
					description "The JAXB Bindings for STIX v." + version
					url "https://github.com/nemonik/java_stix"
					
					scm {
						connection "https://github.com/nemonik/java_stix.git"
						developerConnection "https://github.com/nemonik/java_stix.git"
						url "https://github.com/nemonik/java_stix"
					}
					
					licenses {
						license {
							name "The BSD 3-Clause License"
							url "https://raw.githubusercontent.com/nemonik/java_stix/master/LICENSE"
						}
					}
					
					developers {
						developer {
							id 'nemonik'
							name 'Michael Joseph Walsh'
							email 'java-stix-pom[ASCII character number 64]nemonik.com'
						}
					}
				}
			}
		}
	}
}

javadoc {
	include "**/org/mitre/stix/**/*"
	include "**/com/mandiant/**/*"
	include "**/gov/nist/**/*"
	include "**/oasis/nist/**/*"
	include "**/org/icasi/**/*"
	include "**/org/mitre/**/*"
	include "**/org/purl/**/*"
	include "**/org/w3/**/*"
	
	options.overview = "src/main/javadoc/overview.html";
	options.showAll()
	options.encoding("UTF-8")
	options.setUse(true)
	options.author(true)
	options.version(true)
	options.windowTitle("java-stix v." + version)
	options.docTitle("java-stix v." + version)
	options.footer("Copyright (c) 2015, The MITRE Corporation. All rights reserved.")
	
	doFirst {
		javadoc.title = "java-stix v." + version
		javadoc.options.docTitle = javadoc.title
	}
}

if (JavaVersion.current().isJava8Compatible()) {
	tasks.withType(Javadoc) {
		// disable strict doclint in Java 8
		options.addStringOption('Xdoclint:none', '-quiet')
	}
}

artifacts {
	archives jar
	archives sourcesJar
	archives javadocJar
}

buildscript {
	repositories {
		jcenter()
		mavenCentral()
		mavenLocal()
		
		flatDir { dirs "libs" }
	}

	dependencies {
		// Needed for GeneratedSourceTransformationTask
		classpath name: "org.eclipse.core.runtime_3.10.0.v20140318-2214"
		classpath name: "org.eclipse.osgi_3.10.0.v20140606-1445"
		classpath name: "org.eclipse.core.contenttype_3.4.200.v20140207-1251"
		classpath name: "org.eclipse.equinox.common_3.6.200.v20130402-1505"
		classpath name: "org.eclipse.text_3.5.300.v20130515-1451"
		classpath name: "org.eclipse.core.jobs_3.6.0.v20140424-0053"
		classpath name: "org.eclipse.equinox.preferences_3.5.200.v20140224-1527"
		classpath name: "org.eclipse.core.resources_3.9.0.v20140514-1307"
		classpath name: "org.eclipse.jdt.core_3.10.0.v20140604-1726"
		classpath name: "org.eclipse.equinox.registry_3.5.400.v20140428-1507"
		
		// Needed for GenerateJAXBTask
		classpath "com.sun.xml.bind:jaxb-xjc:2.2.5-2"
		classpath "com.sun.xml.bind:jaxb-impl:2.2.5-2"
		classpath "javax.xml.bind:jaxb-api:2.2.+"
		
		classpath "org.jvnet.jaxb2_commons:jaxb2-basics:0.6.5"
		classpath "org.jvnet.jaxb2_commons:jaxb2-basics-ant:0.6.5"
		classpath "org.jvnet.jaxb2_commons:jaxb2-fluent-api:3.0"
		classpath "org.jvnet.jaxb2_commons:jaxb2-value-constructor:3.0"	
		classpath "org.jvnet.jaxb2_commons:jaxb2-default-value:1.1"
		classpath "org.jvnet.jaxb2_commons:jaxb2-namespace-prefix:1.1"
	}
}
